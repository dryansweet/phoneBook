{"version":3,"sources":["components/PhoneEntry.js","components/PersonForm.js","components/Addition.js","services/person.js","App.js","serviceWorker.js","index.js"],"names":["PhoneEntry","person","remove","name","number","onClick","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Notification","message","error","className","baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","App","useState","setNewName","setNewNumber","searchName","setNewSearchName","persons","setPersons","setMessage","useEffect","personService","console","log","removeEntry","entry","filter","peopleToShow","element","toUpperCase","match","event","target","PersonForm","preventDefault","personObj","index","findIndex","concat","setTimeout","updatedNotes","map","catch","alert","i","key","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1652935e.chunk.js","sourcesContent":["import React from 'react'\n\nconst PhoneEntry = ({ person, remove }) => {\n  return (\n    <li>\n      {person.name}: {person.number}\n      <button onClick={()=>remove(person)} >Delete</button>\n    </li>\n  )\n}\n\nexport default PhoneEntry","import React from 'react'\n\n\n\nconst PhoneEntry = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                name:\n      <input\n                    value={newName}\n                    onChange={handleNameChange}\n                />\n            </div>\n            <div>\n                number:\n      <input\n                    value={newNumber}\n                    onChange={handleNumberChange}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PhoneEntry","import React from 'react'\n\nconst Notification = ({ message, error }) => {\n    if (message === null) {\n        return null\n    }\n\n    if (error) {\n        return (\n            <div className=\"error\">\n                {message}\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"message\">\n            {message}\n        </div>\n    )\n}\n\n// const Error = ({ message }) => {\n//     if (message === null) {\n//         return null\n//     }\n\n//     return (\n//         <div className=\"error\">\n//             {message}\n//         </div>\n//     )\n// }\n\nexport default Notification ","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react'\nimport PhoneEntry from './components/PhoneEntry'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Addition'\nimport personService from './services/person'\nimport \"./index.css\"\n\n// import axios from 'axios'\n\nconst App = () => {\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchName, setNewSearchName] = useState('')\n  const [persons, setPersons] = useState([])\n  const [message, setMessage] = useState({ message: null, error: false})\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(data => {\n        console.log('promise fulfilled')\n        setPersons(data)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const personObj = {\n      name: newName,\n      number: newNumber\n    }\n\n    let index = persons.findIndex((person) => {\n      return person.name === newName\n    })\n    if (index === -1) {\n      personService\n        .create(personObj)\n        .then(personObj => {\n          setPersons(persons.concat(personObj))\n          setNewName('')\n          setNewNumber('')\n          setMessage({message: `Added ${personObj.name}`})\n          setTimeout(() => {\n            setMessage({message: null})\n          }, 5000)\n        })\n    } else {\n      personService.update(index, personObj)\n        .then(updatedNotes => {\n          setPersons(persons.map(person => person.name !== personObj.name ? person : personObj))\n        })\n        .catch(error => {\n          setMessage({ message: `Added ${personObj.name}`, error: true })\n          alert(`${personObj.name} is not in the phonebook`)\n        })\n\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setNewSearchName(event.target.value)\n  }\n\n  const removeEntry = (entry) => {\n    personService\n      .remove(entry.id)\n      .then(data => {\n        setPersons(persons.filter(person => person.id !== entry.id))\n      })\n  }\n\n  const peopleToShow = persons.filter(element => element.name.toUpperCase().match(searchName.toUpperCase()))\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message.message} error={message.error} />\n      <h3>Search</h3>\n      <div>\n        name:\n          <input\n          value={searchName}\n          onChange={handleSearchChange}\n        />\n      </div>\n      <h3>Add new</h3>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <ul>\n        {peopleToShow.map((person, i) =>\n          <PhoneEntry key={i} person={person} remove={removeEntry} />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}